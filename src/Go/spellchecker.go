package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"runtime"
	"time"
)

type ResponseJSON struct {
	Response Response
}

type ResponseHeader struct {
	QTime  int
	Params Params
}

type Params struct {
	Q string
}

type Response struct {
	NumFound int
}

type Candidate struct {
	Word string
	Prob int
}

func main() {
	st := time.Now().Nanosecond()

	// candidates := []string{"大家税务总局", "皇家税务总局", "陆家税务总局", "哪家税务总局", "娘家税务总局", "老家税务总局", "你家税务总局", "买家税务总局", "冤家税务总局", "厂家税务总局", "回家税务总局", "归家税务总局", "当家税务总局", "四家税务总局", "独家税务总局", "住家税务总局", "农家税务总局", "新家税务总局", "渔家税务总局", "方家税务总局", "还家税务总局", "这家税务总局", "作家税务总局", "佛家税务总局", "首家税务总局", "之家税务总局", "国家税务总局", "国家税务总局", "想家税务总局", "多家税务总局", "居家税务总局", "举家税务总局", "发家税务总局", "王家税务总局", "婆家税务总局", "身家税务总局", "几家税务总局", "她家税务总局", "两家税务总局", "学家税务总局", "某家税务总局", "东家税务总局", "张家税务总局", "专家税务总局", "酒家税务总局", "世家税务总局", "三家税务总局", "小家税务总局", "下家税务总局", "玩家税务总局", "一家税务总局", "输家税务总局", "炒家税务总局", "万家税务总局", "道家税务总局", "那家税务总局", "周家税务总局", "安家税务总局", "画家税务总局", "分家税务总局", "看家税务总局", "宜家税务总局", "搬家税务总局", "他家税务总局", "每家税务总局", "儒家税务总局", "赢家税务总局", "别家税务总局", "私家税务总局", "客家税务总局", "如家税务总局", "赵家税务总局", "仇家税务总局", "到家税务总局", "起家税务总局", "商家税务总局", "家家税务总局", "顾家税务总局", "卖家税务总局", "亲家税务总局", "富家税务总局", "岳家税务总局", "土家税务总局", "兵家税务总局", "店家税务总局", "法家税务总局", "人家税务总局", "养家税务总局", "行家税务总局", "谁家税务总局", "庄家税务总局", "千家税务总局", "离家税务总局", "十家税务总局", "全家税务总局", "八家税务总局", "六家税务总局", "名家税务总局", "杜家税务总局", "五家税务总局", "败家税务总局", "合家税务总局", "各家税务总局", "管家税务总局", "在家税务总局", "爱家税务总局", "我家税务总局", "百家税务总局", "李家税务总局", "成家税务总局", "马家税务总局", "自家税务总局"}
	candidates := []string{"价值税税率计算应", "峰值税税率计算应", "原值税税率计算应", "热值税税率计算应", "正值税税率计算应", "分值税税率计算应", "等值税税率计算应", "赋值税税率计算应", "差值税税率计算应", "轮值税税率计算应", "限值税税率计算应", "均值税税率计算应", "案值税税率计算应", "当值税税率计算应", "增值税税率计算应", "适值税税率计算应", "极值税税率计算应", "面值税税率计算应", "比值税税率计算应", "保值税税率计算应", "阈值税税率计算应", "超值税税率计算应", "升值税税率计算应", "产值税税率计算应", "币值税税率计算应", "市值税税率计算应", "负值税税率计算应", "时值税税率计算应", "数值税税率计算应", "现值税税率计算应", "贬值税税率计算应", "减值税税率计算应", "不值税税率计算应", "充值税税率计算应", "量值税税率计算应", "净值税税率计算应", "总值税税率计算应", "值税税率计算应是", "值税税率计算应考", "值税税率计算应由", "值税税率计算应答", "值税税率计算应力", "值税税率计算应以", "值税税率计算应用", "值税税率计算应用层", "值税税率计算应用于", "值税税率计算应验", "值税税率计算应许", "值税税率计算应当", "值税税率计算应当说", "值税税率计算应邀", "值税税率计算应纳", "值税税率计算应收", "值税税率计算应付", "值税税率计算应付款", "值税税率计算应有", "值税税率计算应到", "值税税率计算应作", "值税税率计算应届", "值税税率计算应届生", "值税税率计算应招", "值税税率计算应运", "值税税率计算应从", "值税税率计算应为", "值税税率计算应征", "值税税率计算应征者", "值税税率计算应景", "值税税率计算应尽", "值税税率计算应该", "值税税率计算应该说", "值税税率计算应该是", "值税税率计算应变", "值税税率计算应否", "值税税率计算应声", "值税税率计算应声虫", "值税税率计算应酬", "值税税率计算应募", "值税税率计算应得", "值税税率计算应聘", "值税税率计算应聘者", "值税税率计算应交", "值税税率计算应负", "值税税率计算应税", "值税税率计算应急", "值税税率计算应把", "值税税率计算应时", "值税税率计算应激", "值税税率计算应诉", "值税税率计算应召", "值税税率计算应在", "值税税率计算应允", "值税税率计算应对", "值税税率计算应与", "值税税率计算应试", "值税税率计算应试者", "值税税率计算应按", "值税税率计算应予", "值税税率计算应战", "值税税率计算应将", "值税税率计算应向", "值税税率计算应于", "增值税税率计算应是", "增值税税率计算应考", "增值税税率计算应由", "增值税税率计算应答", "增值税税率计算应力", "增值税税率计算应以", "增值税税率计算应用", "增值税税率计算应用层", "增值税税率计算应用于", "增值税税率计算应验", "增值税税率计算应许", "增值税税率计算应当", "增值税税率计算应当说", "增值税税率计算应邀", "增值税税率计算应纳", "增值税税率计算应收", "增值税税率计算应付", "增值税税率计算应付款", "增值税税率计算应有", "增值税税率计算应到", "增值税税率计算应作", "增值税税率计算应届", "增值税税率计算应届生", "增值税税率计算应招", "增值税税率计算应运", "增值税税率计算应从", "增值税税率计算应为", "增值税税率计算应征", "增值税税率计算应征者", "增值税税率计算应景", "增值税税率计算应尽", "增值税税率计算应该", "增值税税率计算应该说", "增值税税率计算应该是", "增值税税率计算应变", "增值税税率计算应否", "增值税税率计算应声", "增值税税率计算应声虫", "增值税税率计算应酬", "增值税税率计算应募", "增值税税率计算应得", "增值税税率计算应聘", "增值税税率计算应聘者", "增值税税率计算应交", "增值税税率计算应负", "增值税税率计算应税", "增值税税率计算应急", "增值税税率计算应把", "增值税税率计算应时", "增值税税率计算应激", "增值税税率计算应诉", "增值税税率计算应召", "增值税税率计算应在", "增值税税率计算应允", "增值税税率计算应对", "增值税税率计算应与", "增值税税率计算应试", "增值税税率计算应试者", "增值税税率计算应按", "增值税税率计算应予", "增值税税率计算应战", "增值税税率计算应将", "增值税税率计算应向", "增值税税率计算应于"}

	results := GetCandidates(candidates)
	bjson, _ := json.Marshal(results)
	jsonStr := string(bjson)

	et := time.Now().Nanosecond()
	ctime := float64(et-st) / 1000000.0
	fmt.Println(jsonStr, ctime)

}
func GetCandidates(candidates []string) []Candidate {
	workers := runtime.NumCPU()
	jobs := make(chan string, workers)
	runtime.GOMAXPROCS(workers)

	res := make(chan Candidate, len(candidates))
	done := make(chan int, workers)

	for i := 0; i < workers; i++ {
		go func() {
			for str := range jobs {
				prob := GetProbability(str)
				res <- Candidate{str, prob}
			}
			done <- 1
		}()
	}
	for _, s := range candidates {
		jobs <- s
	}
	close(jobs)
	for i := 0; i < workers; i++ {
		<-done
	}
	close(done)
	close(res)

	results := make([]Candidate, 0, len(res))
	for r := range res {
		if r.Prob > 1 {
			results, _ = AddCandidate(results, r)
		}

	}

	return results
}

func AddCandidate(candidates []Candidate, oneCddt Candidate) ([]Candidate, error) {
	if len(candidates) == 0 {
		candidates = append(candidates, oneCddt)
	} else {
		for k, v := range candidates {
			if oneCddt.Prob > v.Prob {
				candidates = append(candidates, Candidate{})
				copy(candidates[k+1:], candidates[k:])
				candidates[k] = oneCddt
			}
		}
	}
	return candidates, nil
}

func GetProbability(word string) int {
	uri := "http://10.123.4.210:8080/solr/termrelated/select?q=text%3A%22" + url.QueryEscape(word) + "%22&start=0&rows=0&wt=json&indent=true"
	resp, err := http.Get(uri)
	if err != nil {
		return 0
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return 0
	}
	numFound := GetNumFound(body)

	return numFound
}

func GetNumFound(result []byte) int {
	var x ResponseJSON
	json.Unmarshal(result, &x)

	return x.Response.NumFound
}
